{"/home/travis/build/npmtest/node-npmtest-rolling-spider/test.js":"/* istanbul instrument in package npmtest_rolling_spider */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/lib.npmtest_rolling_spider.js":"/* istanbul instrument in package npmtest_rolling_spider */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rolling_spider = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rolling_spider = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rolling-spider && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rolling_spider */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rolling_spider\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rolling_spider.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rolling_spider.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rolling_spider.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rolling_spider.__dirname + '/lib.npmtest_rolling_spider.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/index.js":"module.exports = require('./lib/drone');\nmodule.exports.Swarm = require('./lib/swarm');\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/lib/drone.js":"/* global Buffer */\n\n'use strict';\n\n\nvar noble = require('noble');\nvar debug = require('debug')('rollingspider');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar _ = require('lodash');\n\n\n\n/**\n * Constructs a new RollingSpider\n *\n * @param {Object} options to construct the drone with:\n *  - {String} uuid to connect to. If this is omitted then it will connect to the first device starting with 'RS_' as the local name.\n *  - logger function to call if/when errors occur. If omitted then uses console#log\n * @constructor\n */\nvar Drone = function(options) {\n  EventEmitter.call(this);\n\n  var uuid = (typeof options === 'string' ? options : undefined);\n  options = options || {};\n\n  this.uuid = null;\n  this.targets = uuid || options.uuid;\n\n  if (this.targets && !util.isArray(this.targets)) {\n    this.targets = this.targets.split(',');\n  }\n\n  this.logger = options.logger || debug; //use debug instead of console.log\n  this.forceConnect = options.forceConnect || false;\n  this.connected = false;\n  this.discovered = false;\n  this.ble = noble;\n  this.peripheral = null;\n  this.takenOff = false;\n\n  this.driveStepsRemaining = 0;\n  this.speeds = {\n    yaw: 0, // turn\n    pitch: 0, // forward/backward\n    roll: 0, // left/right\n    altitude: 0 // up/down\n  };\n\n  /**\n   * Used to store the 'counter' that's sent to each characteristic\n   */\n  this.steps = {\n    'fa0a': 0,\n    'fa0b': 0,\n    'fa0c': 0\n  };\n\n  this.status = {\n    stateValue: 0,\n    flying: false,\n    battery: 100\n  };\n\n\n  // handle disconnect gracefully\n  this.ble.on('warning', function(message) {\n    this.onDisconnect();\n  }.bind(this));\n};\n\n\nutil.inherits(Drone, EventEmitter);\n\n/**\n * Drone.isDronePeripheral\n *\n * Accepts a BLE peripheral object record and returns true|false\n * if that record represents a Rolling Spider Drone or not.\n *\n * @param  {Object}  peripheral A BLE peripheral record\n * @return {Boolean}\n */\nDrone.isDronePeripheral = function(peripheral) {\n  if (!peripheral) {\n    return false;\n  }\n\n  var localName = peripheral.advertisement.localName;\n  var manufacturer = peripheral.advertisement.manufacturerData;\n\n  var acceptedNames = [\n    'RS_',\n    'Mars_',\n    'Travis_',\n    'Maclan_',\n    'Mambo_',\n    'Blaze_',\n    'Swat_'\n  ];\n  var acceptedManufacturers = [\n    '4300cf1900090100',\n    '4300cf1909090100',\n    '4300cf1907090100'\n  ];\n\n  var localNameMatch = localName\n    && (acceptedNames.findIndex(function(name) { return localName.startsWith(name); }) >= 0);\n\n  var manufacturerMatch = manufacturer\n    && (acceptedManufacturers.indexOf(manufacturer.toString('hex')) >= 0);\n\n  // Is true for EITHER a valid name prefix OR manufacturer code.\n  return localNameMatch || manufacturerMatch;\n};\n\n\n// create client helper function to match ar-drone\nDrone.createClient = function(options) {\n  return new Drone(options);\n};\n\n/**\n * Connects to the drone over BLE\n *\n * @param callback to be called once connected\n * @todo Make the callback be called with an error if encountered\n */\nDrone.prototype.connect = function(callback) {\n  this.logger('RollingSpider#connect');\n  if (this.targets) {\n    this.logger('RollingSpider finding: ' + this.targets.join(', '));\n  }\n\n  this.ble.on('discover', function(peripheral) {\n    this.logger('RollingSpider.on(discover)');\n    this.logger(peripheral);\n\n    var isFound = false;\n    var connectedRun = false;\n    var matchType = 'Fuzzy';\n\n    // Peripheral specific\n    var localName = peripheral.advertisement.localName;\n    var uuid = peripheral.uuid;\n\n    // Is this peripheral a Parrot Rolling Spider?\n    var isDrone = Drone.isDronePeripheral(peripheral);\n\n    var onConnected = function(error) {\n      if (connectedRun) {\n        return;\n      } else {\n        connectedRun = true;\n      }\n      if (error) {\n        if (typeof callback === 'function') {\n          callback(error);\n        }\n      } else {\n        this.logger('Connected to: ' + localName);\n        this.ble.stopScanning();\n        this.connected = true;\n        this.setup(callback);\n      }\n    }.bind(this);\n\n    this.logger(localName);\n\n    if (this.targets) {\n      this.logger(this.targets.indexOf(uuid));\n      this.logger(this.targets.indexOf(localName));\n    }\n\n    if (!this.discovered) {\n\n      if (this.targets &&\n        (this.targets.indexOf(uuid) >= 0 || this.targets.indexOf(localName) >= 0)) {\n        matchType = 'Exact';\n        isFound = true;\n      } else if ((typeof this.targets === 'undefined' || this.targets.length === 0) && isDrone) {\n        isFound = true;\n      }\n\n      if (isFound) {\n        this.logger(matchType + ' match found: ' + localName + ' <' + uuid + '>');\n        this.connectPeripheral(peripheral, onConnected);\n      }\n    }\n  }.bind(this));\n\n  if (this.forceConnect || this.ble.state === 'poweredOn') {\n    this.logger('RollingSpider.forceConnect');\n    this.ble.startScanning();\n  } else {\n    this.logger('RollingSpider.on(stateChange)');\n    this.ble.on('stateChange', function(state) {\n      if (state === 'poweredOn') {\n        this.logger('RollingSpider#poweredOn');\n        this.ble.startScanning();\n      } else {\n        this.logger('stateChange == ' + state);\n        this.ble.stopScanning();\n        if (typeof callback === 'function') {\n          callback(new Error('Error with Bluetooth Adapter, please retry'));\n        }\n      }\n    }.bind(this));\n  }\n};\n\n\nDrone.prototype.connectPeripheral = function(peripheral, onConnected) {\n  this.discovered = true;\n  this.uuid = peripheral.uuid;\n  this.name = peripheral.advertisement.localName;\n  this.peripheral = peripheral;\n  this.ble.stopScanning();\n  this.peripheral.connect(onConnected);\n  this.peripheral.on('disconnect', function() {\n    this.onDisconnect();\n  }.bind(this));\n};\n\n/**\n * Sets up the connection to the drone and enumerate all of the services and characteristics.\n *\n *\n * @param callback to be called once set up\n * @private\n */\nDrone.prototype.setup = function(callback) {\n  this.logger('RollingSpider#setup');\n  this.peripheral.discoverAllServicesAndCharacteristics(function(error, services, characteristics) {\n    if (error) {\n      if (typeof callback === 'function') {\n        callback(error);\n      }\n    } else {\n      this.services = services;\n      this.characteristics = characteristics;\n\n      this.handshake(callback);\n    }\n  }.bind(this));\n};\n\n/**\n * Performs necessary handshake to initiate communication with the device. Also configures all notification handlers.\n *\n *\n * @param callback to be called once set up\n * @private\n */\nDrone.prototype.handshake = function(callback) {\n  this.logger('RollingSpider#handshake');\n  ['fb0f', 'fb0e', 'fb1b', 'fb1c', 'fd22', 'fd23', 'fd24', 'fd52', 'fd53', 'fd54'].forEach(function(key) {\n    var characteristic = this.getCharacteristic(key);\n    characteristic.notify(true);\n  }.bind(this));\n\n  // Register listener for battery notifications.\n  this.getCharacteristic('fb0f').on('data', function(data, isNotification) {\n    if (!isNotification) {\n      return;\n    }\n    this.status.battery = data[data.length - 1];\n    this.emit('battery');\n    this.logger('Battery level: ' + this.status.battery + '%');\n  }.bind(this));\n\n  /**\n   * Flying statuses:\n   *\n   * 0: Landed\n   * 1: Taking off\n   * 2: Hovering\n   * 3: ??\n   * 4: Landing\n   * 5: Emergency / Cut out\n   */\n  this.getCharacteristic('fb0e').on('data', function(data, isNotification) {\n    if (!isNotification) {\n      return;\n    }\n    if (data[2] !== 2) {\n      return;\n    }\n\n\n    var prevState = this.status.flying,\n      prevFlyingStatus = this.status.stateValue;\n\n    this.logger('Flying status: ' + data[6]);\n    if ([1, 2, 3, 4].indexOf(data[6]) >= 0) {\n      this.status.flying = true;\n    }\n\n    this.status.stateValue = data[6];\n\n    if (prevState !== this.status.flying) {\n      this.emit('stateChange');\n    }\n\n    if (prevFlyingStatus !== this.status.stateValue) {\n      this.emit('flyingStatusChange', this.status.stateValue);\n    }\n\n  }.bind(this));\n\n\n  setTimeout(function() {\n\n    this.writeTo(\n      'fa0b',\n      new Buffer([0x04, ++this.steps.fa0b, 0x00, 0x04, 0x01, 0x00, 0x32, 0x30, 0x31, 0x34, 0x2D, 0x31, 0x30, 0x2D, 0x32, 0x38, 0x00]),\n      function(error) {\n        setTimeout(function() {\n          if (typeof callback === 'function') {\n            callback(error);\n          }\n        }, 100);\n      }\n    );\n  }.bind(this), 100);\n};\n\n\n\n/**\n * Gets a Characteristic by it's unique_uuid_segment\n *\n * @param {String} unique_uuid_segment\n * @returns Characteristic\n */\nDrone.prototype.getCharacteristic = function(unique_uuid_segment) {\n  var filtered = this.characteristics.filter(function(c) {\n    return c.uuid.search(new RegExp(unique_uuid_segment)) !== -1;\n  });\n\n  return filtered[0];\n\n};\n\n/**\n * Writes a Buffer to a Characteristic by it's unique_uuid_segment\n *\n * @param {String} unique_uuid_segment\n * @param {Buffer} buffer\n */\nDrone.prototype.writeTo = function(unique_uuid_segment, buffer, callback) {\n  if (!this.characteristics) {\n    var e = new Error('You must have bluetooth enabled and be connected to a drone before executing a command. Please ensure Bluetooth is enabled on your machine and you are connected.');\n    if (callback) {\n      callback(e);\n    } else {\n      throw e;\n    }\n  } else {\n    if (typeof callback === 'function') {\n      this.getCharacteristic(unique_uuid_segment).write(buffer, true, callback);\n    } else {\n      this.getCharacteristic(unique_uuid_segment).write(buffer, true);\n    }\n  }\n};\n\nDrone.prototype.onDisconnect = function() {\n  if (this.connected) {\n    this.logger('Disconnected from drone: ' + this.name);\n    if (this.ping) {\n      clearInterval(this.ping);\n    }\n    this.ble.removeAllListeners();\n    this.connected = false;\n    this.discovered = false;\n    //\n    //  CSW - Removed because we do not know if the device is flying or not, so leave state as is.\n    //  var prevState = this.status.flying;\n    //  this.status.flying = false;\n    //  if (prevState !== this.status.flying) {\n    //    this.emit('stateChange');\n    //  }\n    //  this.status.stateValue = 0;\n    //\n    this.emit('disconnected');\n  }\n};\n\n/**\n * 'Disconnects' from the drone\n *\n * @param callback to be called once disconnected\n */\nDrone.prototype.disconnect = function(callback) {\n  this.logger('RollingSpider#disconnect');\n\n  if (this.connected) {\n    this.peripheral.disconnect(function(error) {\n      this.onDisconnect();\n      if (typeof callback === 'function') {\n        callback(error);\n      }\n    }.bind(this));\n  } else {\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n};\n\n\n/**\n * Starts sending the current speed values to the drone every 50 milliseconds\n *\n * This is only sent when the drone is in the air\n *\n * @param callback to be called once the ping is started\n */\nDrone.prototype.startPing = function() {\n  this.logger('RollingSpider#startPing');\n\n  this.ping = setInterval(function() {\n    var buffer = new Buffer(19);\n    buffer.fill(0);\n    buffer.writeInt16LE(2, 0);\n    buffer.writeInt16LE(++this.steps.fa0a, 1);\n    buffer.writeInt16LE(2, 2);\n    buffer.writeInt16LE(0, 3);\n    buffer.writeInt16LE(2, 4);\n    buffer.writeInt16LE(0, 5);\n    buffer.writeInt16LE((this.driveStepsRemaining ? 1 : 0), 6);\n\n    buffer.writeInt16LE(this.speeds.roll, 7);\n    buffer.writeInt16LE(this.speeds.pitch, 8);\n    buffer.writeInt16LE(this.speeds.yaw, 9);\n    buffer.writeInt16LE(this.speeds.altitude, 10);\n    buffer.writeFloatLE(0, 11);\n\n    this.writeTo('fa0a', buffer);\n    if (this.driveStepsRemaining < 0) {\n      // go on the last command blindly\n\n    } else if (this.driveStepsRemaining > 1) {\n      // decrement the drive chain\n      this.driveStepsRemaining--;\n    } else {\n      // reset to hover states\n      this.emit('driveComplete', this.speeds);\n      this.driveStepsRemaining = 0;\n      this.hover();\n    }\n\n  }.bind(this), 50);\n};\n\n\n\n\n\n/**\n * Obtains the signal strength of the connected drone as a dBm metric.\n *\n * @param callback to be called once the signal strength has been identified\n */\nDrone.prototype.signalStrength = function(callback) {\n  this.logger('RollingSpider#signalStrength');\n  if (this.connected) {\n    this.peripheral.updateRssi(callback);\n  } else {\n    if (typeof callback === 'function') {\n      callback(new Error('Not connected to device'));\n    }\n  }\n};\n\nDrone.prototype.drive = function(parameters, steps) {\n  this.logger('RollingSpider#drive');\n  this.logger('driveStepsRemaining', this.driveStepsRemaining);\n  var params = parameters || {};\n  if (!this.driveStepsRemaining || steps < 0) {\n    this.logger('setting state');\n    // only apply when not driving currently, this causes you to exactly move -- prevents fluid\n    this.driveStepsRemaining = steps || 1;\n    this.speeds.roll = params.tilt || 0;\n    this.speeds.pitch = params.forward || 0;\n    this.speeds.yaw = params.turn || 0;\n    this.speeds.altitude = params.up || 0;\n\n    this.logger(this.speeds);\n  // inject into ping flow.\n  }\n};\n\n// Operational Functions\n// Multiple use cases provided to support initial build API as well as\n// NodeCopter API and parity with the ar-drone library.\n\n\n\n/**\n * Instructs the drone to take off if it isn't already in the air\n */\nfunction takeOff(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#takeOff');\n\n  if (this.status.battery < 10) {\n    this.logger('!!! BATTERY LEVEL TOO LOW !!!');\n  }\n  if (!this.status.flying) {\n    this.writeTo(\n      'fa0b',\n      new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x00, 0x01, 0x00])\n    );\n    this.status.flying = true;\n  }\n\n  this.on('flyingStatusChange', function(newStatus) {\n    if (newStatus === 2) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n    }\n  });\n\n}\n\n\n\n/**\n * Configures the drone to fly in 'wheel on' or protected mode.\n *\n */\n\nfunction wheelOn(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#wheelOn');\n  this.writeTo(\n    'fa0b',\n    new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x01, 0x02, 0x00, 0x01])\n  );\n\n  if (callback) {\n    callback();\n  }\n}\n\n/**\n * Configures the drone to fly in 'wheel off' or unprotected mode.\n *\n */\nfunction wheelOff(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#wheelOff');\n  this.writeTo(\n    'fa0b',\n    new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x01, 0x02, 0x00, 0x00])\n  );\n  if (callback) {\n    callback();\n  }\n}\n\n/**\n * Instructs the drone to land if it's in the air.\n */\n\nfunction land(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#land');\n  if (this.status.flying) {\n    this.writeTo(\n      'fa0b',\n      new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x00, 0x03, 0x00])\n    );\n\n    this.on('flyingStatusChange', function(newStatus) {\n      if (newStatus === 0) {\n        this.status.flying = false;\n        if (typeof callback === 'function') {\n          callback();\n        }\n      }\n    });\n\n  } else {\n    this.logger('Calling RollingSpider#land when it\\'s not in the air isn\\'t going to do anything');\n    if (callback) {\n      callback();\n    }\n  }\n}\n\n\nfunction toggle(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#toggle');\n  if (this.status.flying) {\n    this.land(options, callback);\n  } else {\n    this.takeOff(options, callback);\n  }\n}\n\n/**\n * Instructs the drone to do an emergency landing.\n */\nfunction cutOff(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#cutOff');\n  this.status.flying = false;\n  this.writeTo(\n    'fa0c',\n    new Buffer([0x02, ++this.steps.fa0c & 0xFF, 0x02, 0x00, 0x04, 0x00])\n    , callback);\n}\n\n/**\n * Instructs the drone to trim. Make sure to call this before taking off.\n */\nfunction flatTrim(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#flatTrim');\n  this.writeTo(\n    'fa0b',\n    new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x00, 0x00, 0x00]),\n    callback\n  );\n}\n\n\n\n/**\n * Instructs the drone to do a front flip.\n *\n * It will only do this if it's in the air\n *\n */\n\nfunction frontFlip(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#frontFlip');\n  if (this.status.flying) {\n    this.writeTo(\n      'fa0b',\n      new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),\n      callback\n    );\n  } else {\n    this.logger('Calling RollingSpider#frontFlip when it\\'s not in the air isn\\'t going to do anything');\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  if (callback) {\n    callback();\n  }\n}\n\n/**\n * Instructs the drone to do a back flip.\n *\n * It will only do this if it's in the air\n *\n */\n\nfunction backFlip(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#backFlip');\n  if (this.status.flying) {\n    this.writeTo(\n      'fa0b',\n      new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00]),\n      callback\n    );\n  } else {\n    this.logger('Calling RollingSpider#backFlip when it\\'s not in the air isn\\'t going to do anything');\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  if (callback) {\n    callback();\n  }\n}\n\n/**\n * Instructs the drone to do a right flip.\n *\n * It will only do this if it's in the air\n *\n */\nfunction rightFlip(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#rightFlip');\n  if (this.status.flying) {\n    this.writeTo(\n      'fa0b',\n      new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00]),\n      callback\n    );\n  } else {\n    this.logger('Calling RollingSpider#rightFlip when it\\'s not in the air isn\\'t going to do anything');\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  if (callback) {\n    callback();\n  }\n}\n\n/**\n * Instructs the drone to do a left flip.\n *\n * It will only do this if it's in the air\n *\n */\n\nfunction leftFlip(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  this.logger('RollingSpider#leftFlip');\n  if (this.status.flying) {\n    this.writeTo(\n      'fa0b',\n      new Buffer([0x02, ++this.steps.fa0b & 0xFF, 0x02, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00]),\n      callback\n    );\n  } else {\n    this.logger('Calling RollingSpider#leftFlip when it\\'s not in the air isn\\'t going to do anything');\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  if (callback) {\n    callback();\n  }\n}\n\nfunction driveBuilder(parameters) {\n  var name = parameters.name,\n    parameterToChange = parameters.parameterToChange,\n    scaleFactor = parameters.scaleFactor;\n\n  scaleFactor = scaleFactor || 1;\n\n  return function(possibleOptions, possibleCallback) {\n    var options, callback;\n    if (_.isPlainObject(possibleOptions)) {\n      options = possibleOptions;\n      callback = _.isFunction(possibleCallback) ? possibleCallback : _.noop;\n    } else if (_.isFunction(possibleOptions)) {\n      callback = possibleOptions;\n    } else {\n      callback = _.noop;\n    }\n\n    this.logger('RollingSpider#' + name);\n    if (this.status.flying) {\n      options = options || {};\n      var speed = options.speed || 50;\n      var steps = options.steps || 50;\n      if (!validSpeed(speed)) {\n        this.logger('RollingSpider#' + name + 'was called with an invalid speed: ' + speed);\n        callback();\n      } else {\n        var driveParams = {};\n        driveParams[parameterToChange] = speed * scaleFactor;\n        this.drive(driveParams, steps);\n        this.once('driveComplete', callback);\n      }\n    } else {\n      this.logger('RollingSpider#' + name + ' when it\\'s not in the air isn\\'t going to do anything');\n      callback();\n    }\n  };\n\n}\n\n/**\n * Instructs the drone to start moving upward at speed\n *\n * @param {float} speed at which the drive should occur\n * @param {float} steps the length of steps (time) the drive should happen\n */\nvar up = driveBuilder({\n  name: 'up',\n  parameterToChange: 'up'\n});\n\n/**\n * Instructs the drone to start moving downward at speed\n *\n * @param {float} speed at which the drive should occur\n * @param {float} steps the length of steps (time) the drive should happen\n */\nvar down = driveBuilder({\n  name: 'down',\n  parameterToChange: 'up',\n  scaleFactor: -1\n});\n\n/**\n * Instructs the drone to start moving forward at speed\n *\n * @param {float} speed at which the drive should occur. 0-100 values.\n * @param {float} steps the length of steps (time) the drive should happen\n */\nvar forward = driveBuilder({\n  name: 'forward',\n  parameterToChange: 'forward'\n});\n\n\n/**\n * Instructs the drone to start moving backward at speed\n *\n * @param {float} speed at which the drive should occur\n * @param {float} steps the length of steps (time) the drive should happen\n */\nvar backward = driveBuilder({\n  name: 'backward',\n  parameterToChange: 'forward',\n  scaleFactor: -1\n});\n\n\n/**\n * Instructs the drone to start spinning clockwise at speed\n *\n * @param {float} speed at which the rotation should occur\n * @param {float} steps the length of steps (time) the turning should happen\n */\nvar turnRight = driveBuilder({\n  name: 'turnRight',\n  parameterToChange: 'turn'\n});\n\n/**\n * Instructs the drone to start spinning counter-clockwise at speed\n *\n * @param {float} speed at which the rotation should occur\n * @param {float} steps the length of steps (time) the turning should happen\n */\nvar turnLeft = driveBuilder({\n  name: 'turnLeft',\n  parameterToChange: 'turn',\n  scaleFactor: -1\n});\n\n\n/**\n * Instructs the drone to start moving right at speed\n *\n * @param {float} speed at which the rotation should occur\n * @param {float} steps the length of steps (time) the turning should happen\n */\nvar tiltRight = driveBuilder({\n  name: 'tiltRight',\n  parameterToChange: 'tilt'\n});\n\n\n/**\n * Instructs the drone to start moving left at speed\n *\n * @param {float} speed at which the rotation should occur\n * @param {float} steps the length of steps (time) the turning should happen\n */\nvar tiltLeft = driveBuilder({\n  name: 'tiltLeft',\n  parameterToChange: 'tilt',\n  scaleFactor: -1\n});\n\nfunction hover(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  //this.logger('RollingSpider#hover');\n  this.driveStepsRemaining = 0;\n  this.speeds.roll = 0;\n  this.speeds.pitch = 0;\n  this.speeds.yaw = 0;\n  this.speeds.altitude = 0;\n  if (callback) {\n    callback();\n  }\n}\n\n\n/**\n * Checks whether a speed is valid or not\n *\n * @private\n * @param {float} speed\n * @returns {boolean}\n */\nfunction validSpeed(speed) {\n  return (0 <= speed && speed <= 100);\n}\n\n/**\n* Gets the Bluetooth name of the drone\n* @returns {string}\n*/\nfunction getDroneName()  {\n  return this.peripheral.advertisement.localName;\n}\n\n\n// provide options for use case\nDrone.prototype.takeoff = takeOff;\nDrone.prototype.takeOff = takeOff;\nDrone.prototype.wheelOff = wheelOff;\nDrone.prototype.wheelOn = wheelOn;\nDrone.prototype.land = land;\nDrone.prototype.toggle = toggle;\nDrone.prototype.emergency = cutOff;\nDrone.prototype.emergancy = cutOff;\nDrone.prototype.flatTrim = flatTrim;\nDrone.prototype.calibrate = flatTrim;\nDrone.prototype.up = up;\nDrone.prototype.down = down;\n// animation\nDrone.prototype.frontFlip = frontFlip;\nDrone.prototype.backFlip = backFlip;\nDrone.prototype.rightFlip = rightFlip;\nDrone.prototype.leftFlip = leftFlip;\n\n// rotational\nDrone.prototype.turnRight = turnRight;\nDrone.prototype.clockwise = turnRight;\nDrone.prototype.turnLeft = turnLeft;\nDrone.prototype.counterClockwise = turnLeft;\n\n// directional\nDrone.prototype.forward = forward;\nDrone.prototype.backward = backward;\nDrone.prototype.tiltRight = tiltRight;\nDrone.prototype.tiltLeft = tiltLeft;\nDrone.prototype.right = tiltRight;\nDrone.prototype.left = tiltLeft;\n\nDrone.prototype.hover = hover;\nDrone.prototype.getDroneName = getDroneName;\n\nmodule.exports = Drone;\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/lib/swarm.js":"'use strict';\nvar noble = require('noble');\nvar Drone = require('./drone');\nvar debug = require('debug')('rollingspider');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar _ = require('lodash');\n\n\n/**\n * Constructs a new RollingSpider Swarm\n *\n * @param {Object} options to construct the drone with:\n *  - {String} A comma seperated list (as a string) of UUIDs or names to connect to. This could also be an array of the same items.  If this is omitted then it will add any device with the manufacturer data value for Parrot..\n *  - logger function to call if/when errors occur. If omitted then uses console#log\n * @constructor\n */\nvar Swarm = function(options) {\n  this.ble = noble;\n\n  var membership = (typeof options === 'string' ? options : undefined);\n  options = options || {};\n\n  this.targets = membership || options.membership;\n\n  this.peripherals = [];\n  this.members = [];\n  this.timeout = (options.timeout || 30) * 1000; // in seconds\n\n  //define membership\n  if (this.targets && !util.isArray(this.targets)) {\n    this.targets = this.targets.split(',');\n  } else {\n    this.targets = [];\n  }\n\n  this.logger = options.logger || debug; //use debug instead of console.log\n  this.discovering = false;\n\n  this.active = false;\n\n  // handle disconnect gracefully\n  this.ble.on('warning', function(message) {\n    this.onDisconnect();\n  }.bind(this));\n\n  return this;\n};\n\nutil.inherits(Swarm, EventEmitter);\n\n\nSwarm.prototype.at = function (id, callback) {\n  this.logger('RollingSpider.Swarm#at');\n  var found = null;\n  this.members.forEach(function (member) {\n    if (member.name === id) {\n      found = member;\n    }\n  });\n  if (typeof callback === 'function') {\n    callback(found);\n  } else {\n    return found;\n  }\n};\n\nSwarm.prototype.isMember = function(peripheral) {\n  this.logger('RollingSpider.Swarm#isMember');\n  if (!peripheral) {\n    return false;\n  }\n\n  var localName = peripheral.advertisement.localName;\n  var manufacturer = peripheral.advertisement.manufacturerData;\n  if (this.targets.length === 0) {\n    // handle \"any\" case\n    var localNameMatch = localName\n      && (localName.indexOf('RS_') === 0 || localName.indexOf('Mars_') === 0 || localName.indexOf('Travis_') === 0  || localName.indexOf('Maclan_')=== 0);\n    var manufacturerMatch = manufacturer\n      && (['4300cf1900090100', '4300cf1909090100', '4300cf1907090100'].indexOf(manufacturer) >= 0);\n\n    // Is true for EITHER an \"RS_\" name OR manufacturer code.\n    return localNameMatch || manufacturerMatch;\n  } else {\n    // console.log(this.targets, localName);\n    // console.log(this.targets, peripheral.uuid);\n    // in target list\n    return (this.targets.indexOf(localName) >= 0 || this.targets.indexOf(peripheral.uuid) >= 0);\n  }\n\n};\n\nSwarm.prototype.closeMembership = function(callback) {\n  this.logger('RollingSpider.Swarm#closeMembership');\n  this.ble.stopScanning();\n  this.discovering = false;\n  this.active = true;\n  if (callback) {\n    callback();\n  }\n};\n\nSwarm.prototype.assemble = function(callback) {\n  this.logger('RollingSpider.Swarm#assemble');\n\n  this.once('assembled', function () {\n    //when assembled clean up\n    if (this.TIMEOUT_HANDLER) {\n      clearTimeout(this.TIMEOUT_HANDLER);\n    }\n    this.closeMembership();\n  });\n\n\n  if (this.targets) {\n    this.logger('RollingSpider Swarm Assemble: ' + this.targets.join(', '));\n  }\n\n  var incr = 0;\n  var onSetup = function () {\n    incr++;\n    this.logger(incr+'/'+ this.targets.length);\n    if (this.targets.length > 0 && incr === this.targets.length) {\n      this.emit('assembled');\n    }\n  }.bind(this);\n\n  this.ble.on('discover', function(peripheral) {\n    this.logger('RollingSpider.Swarm#assemble.on(discover)');\n\n\n    // Is this peripheral a Parrot Rolling Spider?\n    var isSwarmMember = this.isMember(peripheral);\n\n\n    this.logger(peripheral.advertisement.localName + (isSwarmMember ? ' is a member' : ' is not a member'));\n    if (isSwarmMember) {\n\n\n      var swarmMember = new Drone();\n      swarmMember.ble = this.ble; // share the same noble instance\n\n      swarmMember.connectPeripheral(peripheral, function() {\n        this.logger(peripheral.advertisement.localName + ' is connected');\n        swarmMember.setup(function() {\n          this.logger(peripheral.advertisement.localName + ' is setup');\n          this.members.push(swarmMember);\n          swarmMember.flatTrim();\n          swarmMember.startPing();\n          onSetup();\n        }.bind(this));\n      }.bind(this));\n    }\n  }.bind(this));\n\n  this.TIMEOUT_HANDLER = setTimeout(function () {\n    this.logger('Swarm#assemble.timeout');\n    this.emit('assembled');\n  }.bind(this), this.timeout);      // timeout after 30s\n\n  if (this.forceConnect || this.ble.state === 'poweredOn') {\n    this.logger('RollingSpider.Swarm.forceConnect');\n    this.discovering = true;\n    this.ble.startScanning();\n  } else {\n    this.logger('RollingSpider.on(stateChange)');\n    this.ble.on('stateChange', function(state) {\n      if (state === 'poweredOn') {\n        this.logger('RollingSpider#poweredOn');\n        this.discovering = true;\n        this.ble.startScanning();\n        if (typeof callback === 'function') {\n          callback();\n        }\n      } else {\n        this.logger('stateChange == ' + state);\n        this.ble.stopScanning();\n        if (typeof callback === 'function') {\n          callback(new Error('Error with Bluetooth Adapter, please retry'));\n        }\n      }\n    }.bind(this));\n  }\n\n};\n\nfunction broadcast (fn) {\n\n  return function (opts, callback) {\n    this.logger('RollingSpider.Swarm#broadcast-'+fn);\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var max = this.members.length, count = 0;\n    _.forEach(this.members, function (drone) {\n      try {\n        drone[fn](opts || {}, function () {\n          count++;\n          this.logger(fn+': '+count+'/'+max);\n          if (count === max && callback) {\n            callback();\n          }\n        }.bind(this));\n      } catch (e) {\n        // handle quietly\n      }\n    }.bind(this));\n  };\n}\n\nvar takeOff = broadcast('takeOff');\nvar land = broadcast('land');\n\nSwarm.prototype.release = function (callback) {\n  var max = this.members.length, count = 0;\n  _.forEach(this.members, function (drone) {\n    drone.disconnect(function () {\n      count++;\n      if (count === max && callback) {\n        this.members = [];\n        callback();\n      }\n    });\n  });\n\n  if (max === 0 && callback) {\n    callback();\n  }\n};\n\nvar cutOff = broadcast('emergency');\nvar flatTrim = broadcast('flatTrim');\n\n// provide options for use case\nSwarm.prototype.takeoff = takeOff;\nSwarm.prototype.takeOff = takeOff;\nSwarm.prototype.wheelOff = broadcast('wheelOff');\nSwarm.prototype.wheelOn = broadcast('wheelOn');\nSwarm.prototype.land = land;\nSwarm.prototype.toggle = broadcast('toggle');\nSwarm.prototype.emergency = cutOff;\nSwarm.prototype.emergancy = cutOff;\nSwarm.prototype.flatTrim = flatTrim;\nSwarm.prototype.calibrate = flatTrim;\nSwarm.prototype.up = broadcast('up');\nSwarm.prototype.down = broadcast('down');\n// animation\nSwarm.prototype.frontFlip = broadcast('frontFlip');\nSwarm.prototype.backFlip = broadcast('backFlip');\nSwarm.prototype.rightFlip = broadcast('rightFlip');\nSwarm.prototype.leftFlip = broadcast('leftFlip');\n\n// rotational\nSwarm.prototype.turnRight = broadcast('turnRight');\nSwarm.prototype.clockwise = broadcast('turnRight');\nSwarm.prototype.turnLeft = broadcast('turnLeft');\nSwarm.prototype.counterClockwise = broadcast('turnLeft');\n\n// directional\nSwarm.prototype.forward = broadcast('forward');\nSwarm.prototype.backward = broadcast('backward');\nSwarm.prototype.tiltRight = broadcast('tiltRight');\nSwarm.prototype.tiltLeft = broadcast('tiltLeft');\nSwarm.prototype.right = broadcast('tiltRight');\nSwarm.prototype.left = broadcast('tiltLeft');\n\nSwarm.prototype.hover = broadcast('hover');\n\n\n\n\n\nSwarm.prototype.onDisconnect = function() {\n  // end of swarm\n};\n\n\nmodule.exports = Swarm;\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/eg/discover.js":"'use strict';\n\nvar Drone = require('rolling-spider');\nvar noble = require('noble');\nvar knownDevices = [];\n\nif (noble.state === 'poweredOn') {\n  start();\n} else {\n  noble.on('stateChange', start);\n}\n\nfunction start () {\n  noble.startScanning();\n\n  noble.on('discover', function(peripheral) {\n    if (!Drone.isDronePeripheral(peripheral)) {\n      return; // not a rolling spider\n    }\n\n    var details = {\n      name: peripheral.advertisement.localName,\n      uuid: peripheral.uuid,\n      rssi: peripheral.rssi\n    };\n\n    knownDevices.push(details);\n    console.log(knownDevices.length + ': ' + details.name + ' (' + details.uuid + '), RSSI ' + details.rssi);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/eg/gamepad.js":"'use strict';\n\n\n/*\n  For use with the Logitech Dual Action Controller F310\n  Button Mapping\n\n  X => 1\n  A => 2\n  B => 3\n  Y => 4\n\n*/\n\n\n\n// Create a new one\nvar Controller = require('logitech-dual-action-controller');\n\nvar controller = new Controller();\n\n\n\nvar Drone = require('../');\n\nvar ACTIVE = true;\nvar STEPS = 2;\n\n\nfunction cooldown() {\n  ACTIVE = false;\n  setTimeout(function () {\n    ACTIVE = true;\n  }, STEPS * 12);\n}\n\n\nif (process.env.UUID) {\n  console.log('Searching for ', process.env.UUID);\n}\n\nvar d = new Drone(process.env.UUID);\n\n\nd.connect(function () {\n  d.setup(function () {\n    console.log('Configured for Rolling Spider! ', d.name);\n    d.flatTrim();\n    d.startPing();\n    d.flatTrim();\n\n    // d.on('battery', function () {\n    //   console.log('Battery: ' + d.status.battery + '%');\n    //   d.signalStrength(function (err, val) {\n    //     console.log('Signal: ' + val + 'dBm');\n    //   });\n\n    // });\n\n    // d.on('stateChange', function () {\n    //   console.log(d.status.flying ? \"-- flying\" : \"-- down\");\n    // })\n    setTimeout(function () {\n      console.log('Ready for Flight');\n      ACTIVE = true;\n    }, 1000);\n  });\n});\n\n\nvar state = {\n  tilt: 0,\n  forward: 0,\n  turn: 0,\n  up: 0\n};\n\nfunction variance(val) {\n  return ((val >= -5 && val <= 5) ? 0 : val);\n}\n\ncontroller.on('1:release', function () {\n  d.leftFlip();\n});\n\ncontroller.on('2:release', function () {\n  d.backFlip();\n});\n\ncontroller.on('3:release', function () {\n  d.rightFlip();\n});\n\n\ncontroller.on('4:release', function () {\n  d.frontFlip();\n});\n\n\ncontroller.on('9:release', function () {\n  d.flatTrim();\n});\n\ncontroller.on('10:release', function () {\n  d.toggle();   // take off or land\n});\n\ncontroller.on('left:move', function (data) {\n  console.log('left');\n  state.up = variance(data.y);\n  state.turn = variance(data.x);\n  d.drive(state, -1);\n});\n\ncontroller.on('right:move', function (data) {\n  state.forward = variance(data.y);\n  state.tilt = variance(data.x);\n  d.drive(state, -1);\n});\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/eg/keyboard.js":"'use strict';\n\nvar keypress = require('keypress');\nvar Drone = require('../');\n\nvar ACTIVE = true;\nvar STEPS = 2;\n\n\nfunction cooldown() {\n  ACTIVE = false;\n  setTimeout(function () {\n    ACTIVE = true;\n  }, STEPS * 12);\n}\n\n// make `process.stdin` begin emitting 'keypress' events\nkeypress(process.stdin);\n\n// listen for the 'keypress' event\n\n\nprocess.stdin.setRawMode(true);\nprocess.stdin.resume();\n\nif (process.env.UUID) {\n  console.log('Searching for ', process.env.UUID);\n}\n\nvar d = new Drone();\n\nd.connect(function () {\n  d.setup(function () {\n    console.log('Configured for Rolling Spider! ', d.name);\n    d.flatTrim();\n    d.startPing();\n    d.flatTrim();\n\n    // d.on('battery', function () {\n    //   console.log('Battery: ' + d.status.battery + '%');\n    //   d.signalStrength(function (err, val) {\n    //     console.log('Signal: ' + val + 'dBm');\n    //   });\n\n    // });\n\n    // d.on('stateChange', function () {\n    //   console.log(d.status.flying ? \"-- flying\" : \"-- down\");\n    // })\n    setTimeout(function () {\n      console.log('ready for flight');\n      ACTIVE = true;\n    }, 1000);\n\n  });\n});\n\nprocess.stdin.on('keypress', function (ch, key) {\n  if (ACTIVE && key) {\n    if (key.name === 'm') {\n      d.emergency();\n      setTimeout(function () {\n        process.exit();\n      }, 3000);\n    } else if (key.name === 't') {\n      console.log('takeoff');\n      d.takeOff();\n\n    } else if (key.name === 'w') {\n      d.forward({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 's') {\n      d.backward({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'left') {\n      d.turnLeft({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'a') {\n      d.tiltLeft({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'd') {\n      d.tiltRight({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'right') {\n      d.turnRight({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'up') {\n      d.up({ steps: STEPS * 2.5 });\n      cooldown();\n    } else if (key.name === 'down') {\n      d.down({ steps: STEPS * 2.5 });\n      cooldown();\n    } else if (key.name === 'i' || key.name === 'f') {\n      d.frontFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'j') {\n      d.leftFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'l') {\n      d.rightFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'k') {\n      d.backFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'q') {\n      console.log('Initiated Landing Sequence...');\n      d.land();\n//      setTimeout(function () {\n//        process.exit();\n//      }, 3000);\n    }\n  }\n  if (key && key.ctrl && key.name === 'c') {\n    process.stdin.pause();\n    process.exit();\n  }\n});\n\n\n\n\n//launch();\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/eg/old.js":"'use strict';\n\nvar noble = require('noble');\nvar util = require('util');\n\nvar connectedDrone;\nvar pingValue = 0;\n\nvar Drone = function(peripheral, services, characteristics) {\n  this.peripheral = peripheral;\n  this.services = services;\n  this.characteristics = characteristics;\n};\n\nDrone.prototype.connect = function(cb) {\n  console.log('connecting');\n\n  this.findCharacteristic('fb0f').notify(true);\n  this.findCharacteristic('fb0e').notify(true);\n  this.findCharacteristic('fb1b').notify(true);\n  this.findCharacteristic('fb1c').notify(true);\n  this.findCharacteristic('fd23').notify(true);\n  this.findCharacteristic('fd53').notify(true);\n\n  var drone = this;\n  setTimeout(function() {\n    drone.findCharacteristic('fa0b').write(new Buffer([0x04,0x01,0x00,0x04,0x01,0x00,0x32,0x30,0x31,0x34,0x2D,0x31,0x30,0x2D,0x32,0x38,0x00]), true, function(error) {\n      console.log('connected');\n      if (error) { console.log('error connecting'); }\n\n      // setInterval(function() {\n      //   console.log(\"Ping: \" + pingValue);\n      //   drone.findCharacteristic(\"fa0a\").write(new Buffer([0x02,pingValue,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]), true);\n      //   pingValue++;\n      // }, 500);\n\n      setTimeout(function() {\n        cb();\n      }, 100);\n    });\n  }, 100);\n};\n\nDrone.prototype.takeOff = function() {\n  console.log('Taking off... prepare for pain');\n\n  this.findCharacteristic('fa0b').write(new Buffer([0x02,0x05,0x02,0x00,0x01,0x00]), true);\n  var self = this;\n  setTimeout(function() {\n    self.findCharacteristic('fa0a').write(new Buffer([0x02,0x01,0x02,0x00,0x02,0x00,0x01,0x00,0x00,0x32,0x00,0x00]), true);\n  }, 2000);\n};\n\nDrone.prototype.findCharacteristic = function(unique_uuid_segment) {\n  var theChars = this.characteristics.filter(function(characteristic) {\n    return characteristic.uuid.search(new RegExp(unique_uuid_segment)) != -1;\n  });\n\n  return theChars[0];\n};\n\nif (process.env.UUID) {\n  console.log('Looking for device with UUID: ' + process.env.UUID);\n\n  noble.startScanning();\n\n  noble.on('discover', function(peripheral) {\n    if (peripheral.uuid === process.env.UUID) {\n      peripheral.connect();\n      peripheral.on('connect', function(error) {\n        if (error) { return; }\n\n        peripheral.discoverAllServicesAndCharacteristics(function(error, services, characteristics) {\n          if (error) { return; }\n\n          connectedDrone = new Drone(peripheral, services, characteristics);\n          connectedDrone.connect(function(error) {\n            if (error) { console.log('Problem connecting'); }\n\n            connectedDrone.takeOff();\n          });\n        });\n      });\n    }\n  });\n} else {\n  console.log('No UUID specified');\n}\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/eg/reconnect.js":"'use strict';\n\nvar keypress = require('keypress');\nvar Drone = require('../');\n\n\n\n\nvar d = new Drone(process.env.UUID);\n\n\n\n\nfunction launch() {\n  d.connect(function () {\n      console.log('Prepare for take off! ', d.name);\n      d.flatTrim();\n      setTimeout(function () {\n        console.log('take off');\n        d.takeOff();\n        d.startPing();\n      }, 1000);\n\n      setTimeout(function () {\n        console.log('land');\n        d.land();\n      }, 6000);\n\n\n      setTimeout(function () {\n        console.log('disconnect');\n        d.disconnect();\n      }, 10000);\n  });\n}\n\n\n\n\nlaunch();\n\n\nsetTimeout(launch, 20000);\n\n\n\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/eg/repl.js":"'use strict';\n\nvar Drone = require('../');\nvar repl = require('repl');\n\nif (process.env.UUID) {\n  var d = new Drone(process.env.UUID);\n  d.connect(function() {\n    d.setup(function() {\n      d.startPing();\n\n      var replServer = repl.start({\n        prompt: 'Drone (' + d.uuid + ') > '\n      });\n\n      replServer.context.drone = d;\n\n      replServer.on('exit', function() {\n        d.land();\n        process.exit();\n      });\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-rolling-spider/node_modules/rolling-spider/eg/swarm.js":"'use strict';\n\nvar keypress = require('keypress');\nvar Swarm = require('../').Swarm;\n\nvar ACTIVE = true;\nvar STEPS = 2;\n\n\nfunction cooldown() {\n  ACTIVE = false;\n  setTimeout(function () {\n    ACTIVE = true;\n  }, STEPS * 12);\n}\n\n// make `process.stdin` begin emitting 'keypress' events\nkeypress(process.stdin);\n\n// listen for the 'keypress' event\n\n\nprocess.stdin.setRawMode(true);\nprocess.stdin.resume();\n\n\n\n\nvar swarm = new Swarm({timeout: 10});\n\nswarm.assemble();\n\nswarm.on('assembled', function () {\n  ACTIVE = true;\n});\n\n\n\n\nprocess.stdin.on('keypress', function (ch, key) {\n  if (ACTIVE && key) {\n    if (key.name === 'm') {\n      swarm.emergency();\n      setTimeout(function () {\n        process.exit();\n      }, 3000);\n    } else if (key.name === 't') {\n      console.log('swarm#takeoff');\n      swarm.takeOff();\n    } else if (key.name === 'w') {\n      console.log('swarm#forward');\n      swarm.forward({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 's') {\n      console.log('swarm#backward');\n      swarm.backward({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'left') {\n      console.log('swarm#turnleft');\n      swarm.turnLeft({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'a') {\n      console.log('swarm#tiltleft');\n      swarm.tiltLeft({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'd') {\n      console.log('swarm#tiltright');\n      swarm.tiltRight({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'right') {\n      console.log('swarm#turnright');\n      swarm.turnRight({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'up') {\n      console.log('swarm#up');\n      swarm.up({ steps: STEPS * 2.5 });\n      cooldown();\n    } else if (key.name === 'down') {\n      console.log('swarm#down');\n      swarm.down({ steps: STEPS * 2.5 });\n      cooldown();\n    } else if (key.name === 'i' || key.name === 'f') {\n      swarm.frontFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'j') {\n      swarm.leftFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'l') {\n      swarm.rightFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'k') {\n      swarm.backFlip({ steps: STEPS });\n      cooldown();\n    } else if (key.name === 'q') {\n      console.log('Initiated Landing Sequence...');\n      swarm.land(function () {\n        console.log('land');\n        swarm.release( function () {\n          console.log('release');\n        });\n      });\n\n//      setTimeout(function () {\n//        process.exit();\n//      }, 3000);\n    }\n  }\n  if (key && key.ctrl && key.name === 'c') {\n    process.stdin.pause();\n    process.exit();\n  }\n});\n"}